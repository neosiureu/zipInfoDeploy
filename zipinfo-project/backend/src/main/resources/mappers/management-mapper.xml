<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zipinfo.project.admin.model.mapper.ManagementMapper">

<resultMap id="MemberResultMap" type="com.zipinfo.project.member.model.dto.Member">
  <result property="memberNo" column="MEMBER_NO" />
  <result property="memberEmail" column="MEMBER_EMAIL" />
  <result property="memberNickname" column="MEMBER_NICKNAME" />
  <result property="memberName" column="MEMBER_NAME" />
  <result property="memberAuth" column="MEMBER_AUTH" />
  <result property="enrollDate" column="ENROLL_DATE" />
  <result property="memberDelFl" column="MEMBER_DEL_FL" />
  <result property="postCount" column="POST_COUNT" />
</resultMap>

  <!-- 전체 회원 조회 (삭제되지 않은 회원) -->
 <select id="selectAllMembers">
  SELECT M.MEMBER_NO,
         M.MEMBER_EMAIL,
         M.MEMBER_NICKNAME,
         M.MEMBER_NAME,
         M.MEMBER_AUTH,
         M.ENROLL_DATE,
         M.MEMBER_DEL_FL,
        NVL(B.POST_COUNT, 0) AS POST_COUNT
    FROM MEMBER M
    LEFT JOIN (
      SELECT MEMBER_NO, COUNT(*) AS POST_COUNT
        FROM BOARD
       WHERE BOARD_DEL_FL = 'N'
       GROUP BY MEMBER_NO
    ) B ON M.MEMBER_NO = B.MEMBER_NO
   WHERE M.MEMBER_DEL_FL = 'N'
   ORDER BY M.MEMBER_NO DESC
</select>


  <!-- 삭제된 회원 조회 (논리 삭제된 회원만) -->
  <select id="selectDeletedMembers" resultType="com.zipinfo.project.member.model.dto.Member">
    SELECT MEMBER_NO,
           MEMBER_EMAIL,
           MEMBER_NICKNAME,
           MEMBER_NAME,
           MEMBER_AUTH,
           ENROLL_DATE,
           MEMBER_DEL_FL,
           MEMBER_WITHDRAW_DATE
      FROM MEMBER
     WHERE MEMBER_DEL_FL = 'Y'
  </select>

  <!-- 회원 권한 변경 -->
  <update id="updateMemberAuth">
    UPDATE MEMBER
       SET MEMBER_AUTH = #{authId}
     WHERE MEMBER_NO = #{memberNo}
  </update>

  <!-- 회원 삭제 (soft delete 처리) -->
  <update id="deleteMember">
    UPDATE MEMBER
       SET MEMBER_DEL_FL = 'Y'
     WHERE MEMBER_NO = #{memberNo}
  </update>

  <!-- 회원 복원 -->
  <update id="restoreMember">
    UPDATE MEMBER
       SET MEMBER_DEL_FL = 'N'
     WHERE MEMBER_NO = #{memberNo}
  </update>

  <!-- 삭제된 게시글 목록 조회 -->
  <select id="selectDeletedBoards" resultType="com.zipinfo.project.neighborhood.model.dto.Neighborhood">
    SELECT B.BOARD_NO,
           B.BOARD_TITLE,
           B.BOARD_CONTENT,
           TO_CHAR(B.BOARD_WRITE_DATE, 'YYYY-MM-DD') as BOARD_WRITE_DATE,
           B.READ_COUNT,
           B.BOARD_DEL_FL,
           B.MEMBER_NO,
           M.MEMBER_NICKNAME as memberNickName,
           B.BOARD_SUBJECT,
           (SELECT BT.TOWN_NAME FROM BOARD_TOWN BT WHERE BT.TOWN_NO = B.TOWN_NO) as townName,
           (SELECT BC.CITY_NAME FROM BOARD_CITY BC WHERE BC.CITY_NO = (SELECT BT.CITY_NO FROM BOARD_TOWN BT WHERE BT.TOWN_NO = B.TOWN_NO)) as cityName,
           B.TOWN_NO,
           (SELECT BT.CITY_NO FROM BOARD_TOWN BT WHERE BT.TOWN_NO = B.TOWN_NO) as cityNo,
           0 as boardCode,
           (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = B.BOARD_NO) as likeCount,
           0 as likeCheck
      FROM BOARD B
      LEFT JOIN MEMBER M ON B.MEMBER_NO = M.MEMBER_NO
     WHERE B.BOARD_DEL_FL = 'Y'
     ORDER BY B.BOARD_NO DESC
  </select>

  <!-- 삭제된 게시글 복구 -->
  <update id="restoreBoard">
    UPDATE BOARD
       SET BOARD_DEL_FL = 'N'
     WHERE BOARD_NO = #{boardNo}
  </update>

  <!-- 삭제된 게시글 상세 조회 -->
  <select id="selectDeletedBoardDetail" parameterType="long" resultType="com.zipinfo.project.neighborhood.model.dto.Neighborhood">
    SELECT B.BOARD_NO,
           B.BOARD_TITLE,
           B.BOARD_CONTENT,
           TO_CHAR(B.BOARD_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') as BOARD_WRITE_DATE,
           B.READ_COUNT,
           B.BOARD_DEL_FL,
           B.MEMBER_NO,
           M.MEMBER_NICKNAME as memberNickName,
           B.BOARD_SUBJECT,
           (SELECT BT.TOWN_NAME FROM BOARD_TOWN BT WHERE BT.TOWN_NO = B.TOWN_NO) as townName,
           (SELECT BC.CITY_NAME FROM BOARD_CITY BC WHERE BC.CITY_NO = (SELECT BT.CITY_NO FROM BOARD_TOWN BT WHERE BT.TOWN_NO = B.TOWN_NO)) as cityName,
           B.TOWN_NO,
           (SELECT BT.CITY_NO FROM BOARD_TOWN BT WHERE BT.TOWN_NO = B.TOWN_NO) as cityNo,
           0 as boardCode,
           (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = B.BOARD_NO) as likeCount,
           0 as likeCheck
      FROM BOARD B
      LEFT JOIN MEMBER M ON B.MEMBER_NO = M.MEMBER_NO
     WHERE B.BOARD_DEL_FL = 'Y'
       AND B.BOARD_NO = #{boardNo}
  </select>

  <!-- 삭제된 게시글 영구 삭제 -->
  <delete id="permanentlyDeleteBoard" parameterType="long">
    DELETE FROM BOARD
     WHERE BOARD_NO = #{boardNo}
       AND BOARD_DEL_FL = 'Y'
  </delete>
  
  <delete id="deleteBoardLike">
  	DELETE FROM "LIKE"
  	WHERE BOARD_NO = #{boardNo}
  </delete>
  <delete id="deleteComment">
  	DELETE FROM "COMMENT"
  	WHERE BOARD_NO = #{boardNo}
  </delete>

  <!-- 중개인 신청 회원 목록 조회 -->
  <select id="selectBrokerApplications" resultType="com.zipinfo.project.admin.model.dto.BrokerApplicationDTO">
    SELECT
      m.MEMBER_NO AS memberNumber,
      m.MEMBER_EMAIL AS memberId,
      m.ENROLL_DATE AS joinDate,
      m.MEMBER_AUTH AS memberRole,
      (SELECT COUNT(*) FROM BOARD WHERE MEMBER_NO = m.MEMBER_NO) AS postCount,
      CASE
        WHEN m.MEMBER_AUTH = 2 THEN '신청중'
        WHEN m.MEMBER_AUTH = 3 THEN '승인됨'
        ELSE '기타'
      END AS applicationStatus
    FROM MEMBER m
    WHERE m.MEMBER_AUTH = 2
  </select>

  <!-- 회원 권한 변경 (별칭 명칭) -->
  <update id="updateMemberRole" parameterType="map">
    UPDATE MEMBER
    SET MEMBER_AUTH = #{authId}
    WHERE MEMBER_NO = #{memberNumber}
  </update>
  <!-- 회원 관련 STOCK_SAW 데이터 삭제 -->
  <delete id="deleteMemberStockSaw" parameterType="long">
    DELETE FROM STOCK_SAW WHERE MEMBER_NO = #{memberNo}
  </delete>
  <!-- 회원 관련 LIKE 데이터 삭제 -->
  <delete id="deleteMemberLikes" parameterType="long">
    DELETE FROM "LIKE" WHERE MEMBER_NO = #{memberNo}
  </delete>
  <!-- 회원 관련 COMMENT 데이터 삭제 -->
  <delete id="deleteMemberComments" parameterType="long">
    DELETE FROM "COMMENT" WHERE MEMBER_NO = #{memberNo}
  </delete>
  <!-- 회원 관련 COMMENTLIKE 데이터 삭제 -->
  <delete id="deleteCommentLike" parameterType="long">
    DELETE FROM "COMMENT_LIKE" WHERE MEMBER_NO = #{memberNo}
  </delete>
  <!-- 회원 관련 BOARD 데이터 삭제 -->
  <delete id="deleteMemberBoards" parameterType="long">
    DELETE FROM BOARD WHERE MEMBER_NO = #{memberNo}
  </delete>
  <!-- 회원 관련 TOKEN_INFO 데이터 삭제 -->
  <delete id="deleteMemberTokenInfo" parameterType="long">
    DELETE FROM TOKEN_INFO WHERE MEMBER_NO = #{memberNo}
  </delete>
  <!-- 회원 관련 BROKER_INFO 데이터 삭제 -->
  <delete id="deleteMemberBrokerInfo" parameterType="long">
    DELETE FROM BROKER_INFO WHERE MEMBER_NO = #{memberNo}
  </delete>
  <!-- 회원 관련 HELP_MESSAGE 데이터 삭제 -->
  <delete id="deleteMemberHelpMessage" parameterType="long">
    DELETE FROM HELP_MESSAGE WHERE sender_no = #{memberNo} OR receiver_no = #{memberNo}
  </delete>
  <!-- 회원 관련 MESSAGE_FILE 데이터 삭제 -->
  <delete id="deleteMemberMessageFiles" parameterType="long">
      DELETE FROM MESSAGE_FILE
      WHERE message_no IN (
          SELECT message_no FROM HELP_MESSAGE WHERE sender_no = #{memberNo} OR receiver_no = #{memberNo}
      )
  </delete>

  <delete id="deleteStockCoord">
      DELETE FROM STOCK_COORD
      WHERE STOCK_NO = #{stockNo}
  </delete>
  <delete id="deleteStockSellDate">
      DELETE FROM SELL_DATE
      WHERE STOCK_NO = #{stockNo}
  </delete>
  <delete id="deleteStockImg">
      DELETE FROM STOCK_IMG
      WHERE STOCK_NO = #{stockNo}
  </delete>
  <delete id="deleteLikeStock" parameterType="long">
      DELETE FROM LIKE_STOCK
      WHERE STOCK_NO = #{stockNo}
  </delete>
  <delete id="deleteMemberStockInfo" parameterType="long">
      DELETE FROM STOCK_INFO
      WHERE MEMBER_NO = #{memberNo}
  </delete>
  
  <select id="selectStockNo">
  	SELECT STOCK_NO FROM "STOCK_INFO"
  	WHERE MEMBER_NO = #{memberNo}
  </select>


  <!-- 회원 영구 삭제 -->
  <delete id="permanentlyDeleteMember" parameterType="long">
    DELETE FROM MEMBER WHERE MEMBER_NO = #{memberNo} AND MEMBER_DEL_FL = 'Y'
  </delete>

<select id="findBrokerNumberByEmail" resultType="String">
    SELECT b.BROKER_NO 
    FROM MEMBER m 
    JOIN BROKER_INFO b ON m.MEMBER_NO = b.MEMBER_NO 
    WHERE m.MEMBER_EMAIL = #{memberEmail} AND MEMBER_DEL_FL = 'N' AND MEMBER_LOGIN = 'E'
</select>
</mapper>